package com.charitra.SpringMVC;

import java.util.List;
import java.util.Optional;
import java.util.function.Function;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.repository.query.FluentQuery.FetchableFluentQuery;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

import com.charitra.model.Alien;

@Controller
public class HomeController {
	
	@Autowired
	AlienRepo repo=new AlienRepo() {
		
		@Override
		public <S extends Alien> Optional<S> findOne(Example<S> example) {
			// TODO Auto-generated method stub
			return Optional.empty();
		}
		
		@Override
		public <S extends Alien, R> R findBy(Example<S> example, Function<FetchableFluentQuery<S>, R> queryFunction) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public <S extends Alien> Page<S> findAll(Example<S> example, Pageable pageable) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public <S extends Alien> boolean exists(Example<S> example) {
			// TODO Auto-generated method stub
			return false;
		}
		
		@Override
		public <S extends Alien> long count(Example<S> example) {
			// TODO Auto-generated method stub
			return 0;
		}
		
		@Override
		public Page<Alien> findAll(Pageable pageable) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public List<Alien> findAll(Sort sort) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public <S extends Alien> S save(S entity) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public Optional<Alien> findById(Integer id) {
			// TODO Auto-generated method stub
			return Optional.empty();
		}
		
		@Override
		public boolean existsById(Integer id) {
			// TODO Auto-generated method stub
			return false;
		}
		
		@Override
		public void deleteById(Integer id) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void deleteAllById(Iterable<? extends Integer> ids) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void deleteAll(Iterable<? extends Alien> entities) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void deleteAll() {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void delete(Alien entity) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public long count() {
			// TODO Auto-generated method stub
			return 0;
		}
		
		@Override
		public <S extends Alien> List<S> saveAll(Iterable<S> entities) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public List<Alien> findAllById(Iterable<Integer> ids) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public List<Alien> findAll() {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public <S extends Alien> S saveAndFlush(S entity) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public <S extends Alien> List<S> saveAllAndFlush(Iterable<S> entities) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public Alien getReferenceById(Integer id) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public Alien getOne(Integer id) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public Alien getById(Integer id) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public void flush() {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public <S extends Alien> List<S> findAll(Example<S> example, Sort sort) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public <S extends Alien> List<S> findAll(Example<S> example) {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Override
		public void deleteAllInBatch(Iterable<Alien> entities) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void deleteAllInBatch() {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void deleteAllByIdInBatch(Iterable<Integer> ids) {
			// TODO Auto-generated method stub
			
		}
	};
	
	
	@GetMapping("/")
	public String home()
	{
		return "index";
	}
	
//	@GetMapping("add")  // This is written with help of servlet now we do same with JSP
//	public String add(HttpServletRequest req) {
//		int i = Integer.parseInt(req.getParameter("num1"));
//		int j = Integer.parseInt(req.getParameter("num2"));
//		int ans = i+j;
//		// Now to return data to servlet we can use session
//		HttpSession session  = req.getSession();
//		session.setAttribute("ans",ans);
//		return "result.jsp";
//	}
	
	
//	@GetMapping("add")
//	public String add(@RequestParam("num1") int i,@RequestParam("num2") int j,HttpSession session)
//	{
//		int ans = i+j;
//		session.setAttribute("ans", ans);
//		return "result.jsp";
//	}
	
	// Now we are going to use ModelAndView instead of HttpSession
//	@GetMapping("add")
//	public ModelAndView add(@RequestParam("num1") int i,@RequestParam("num2") int j)
//	{
//		ModelAndView mv = new ModelAndView();
//		int ans = i+j;
//		mv.setViewName("result");
//		mv.addObject("ans",ans);
//		return mv;
//	}
	/* If we only want to set attribute and return string as path then we can use Model object in add parameter like Model m */
	
//	@GetMapping("addAlien")
//	public String addAlien(@RequestParam("aid") String a,@RequestParam("aname") String b, Model m) {
//		
//		Alien a1 = new Alien();
//		a1.setAid(Integer.parseInt(a));
//		a1.setAname(b);
//		m.addAttribute("alien",a1);
//		return "result.jsp";
//	}
	
	/* Now instead of creating object of alien and write request param we want values to be
	 * directly assigned so we @ModelAttribute*/
	@ModelAttribute
	public void ModelData(Model m) {
		m.addAttribute("name","Aliens");
	}
	@PostMapping("addAlien")
	public String addAlien(@ModelAttribute("alien") Alien a,Model m) // To use ModelAttribute take input names as same as class variable names
	{
		// alien is used in @ModelAttribute because we have written alien in result.jsp to represent data of Alien
		// With the help of ModelAttribute we dont have to use m.addAttribute to set data in JSP
		return "result";
	}
	
	@GetMapping("getAliens")
	public String getAliens(Model m) {
		
//		List<Alien> aliens = Arrays.asList(new Alien(1,"Charitra"),new Alien(2,"Rahul"));
		m.addAttribute("result",repo.findAll());
		return "showAliens";
	}
}
